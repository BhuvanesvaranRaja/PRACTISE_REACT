import React, { Component } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import FormikContainer from "../Components/Form/FormikContainer";
import { Container, Row, Col } from "react-bootstrap";
import AgeFieldComponent from "../Components/Form/AgeComponent";
export default class SignUp extends Component {
  constructor(props) {
    super(props);
    this.state = {
      sameAsPrimary: false,
    };
  }
  handleSameAsPrimaryChange = () => {
    this.setState((prevState) => ({
      sameAsPrimary: !prevState.sameAsPrimary,
    }));
  };

  render() {
    const DropCountryOptions = [
      { key: "Select an Option", value: "" },
      { key: "India", value: "India" },
      { key: "America", value: "America" },
      { key: "Africa", value: "Africa" },
    ];
    const DropStateOptions = [
      { key: "Select an Option", value: "" },
      { key: "Tamil Nadu", value: "Tamil Nadu" },
      { key: "Kerala", value: "Kerala" },
      { key: "Punjab", value: "Punjab" },
    ];
    const DropDistrictOptions = [
      { key: "Select an Option", value: "" },
      { key: "Coimbatore", value: "Coimbatore" },
      { key: "Madurai", value: "Madurai" },
      { key: "Chennai", value: "Chennai" },
    ];
    const radioOptions = [
      { key: "Male", value: "Male" },
      { key: "Female", value: "Female" },
      { key: "Others", value: "Others" },
    ];
    const CheckOptions = [
      { key: "Photography", value: "Photography" },
      { key: "Editing", value: "Editing" },
      { key: "Arts", value: "Arts" },
      { key: "Sports", value: "Sports" },
      { key: "Dance", value: "Dance" },
      { key: "Designing", value: "Designing" },
      { key: "Singing", value: "Singing" },
      { key: "Gymnastics", value: "Gymnastics" },
    ];
    const initialValues = {
      name: "",
      lastname: "",
      email: "",
      username: "",
      password: "",
      repassword: "",
      birthDate: null,
      age: "",
      phoneNumber: "",
      radioOption: "",
      address1: "",
      address2: "",
      landmark: "",
      pincode: "",
      selectCountryOption: "",
      selectStateOption: "",
      selectDistrictOption: "",
      CheckOptions: [],
      secaddress1: "",
      secaddress2: "",
      seclandmark: "",
      secpincode: "",
      secselectDistrictOption: "",
      secselectStateOption: "",
      secselectCountryOption: "",
      acceptTerms: "",
    };
    const validationSchema = Yup.object({
      name: Yup.string().required("Name is required"),
      lastname: Yup.string().required("Last Name is required"),
      username: Yup.string()
        .required("User name is required")
        .matches(
          /^[a-zA-Z0-9]*$/,
          "Username cannot contain special characters"
        ),
      phoneNumber: Yup.string()
        .min(10, "Invalid No")
        .matches(/^[6-9]\d{9}$/, "Invalid Number")
        .required("Number is required"),
      email: Yup.string()
        .email("Invalid email format")
        .required("Email is required"),
      password: Yup.string().required("Password is required"),
      repassword: Yup.string()
        .required("Please confirm your password")
        .oneOf([Yup.ref("password"), null], "Passwords must match"),
      birthDate: Yup.date().required("required"),
      age: Yup.string()
        .test(
          "age-validation",
          "Age must be greater than or equal to 18 years",
          (value) => {
            // Regular expression to match the format "X years Y months"
            const agePattern = /^(\d+) years (\d+) months$/;
            if (!value) return false; // If age is not provided, fail validation
            const match = value.match(agePattern);
            if (!match) return false; // If the format doesn't match
            const years = parseInt(match[1]);
            const months = parseInt(match[2]);
            if (years < 18 || (years === 18 && months === 0)) {
              return false; // Age is less than 18
            }
            return true; // Age is valid
          }
        )
        .required("Age is required"),

      selectCountryOption: Yup.string().required("Select the country"),
      selectStateOption: Yup.string().required("Select the State"),
      selectDistrictOption: Yup.string().required("Select the District"),
      radioOption: Yup.string().required("Select the Genders"),
      CheckOptions: Yup.array()
        .min(1, "Select any value")
        .required("Select any value"),
      address1: Yup.string().required("Address1 is required"),
      address2: Yup.string().required("Address2 is required"),
      landmark: Yup.string().required("LandMark is required"),
      pincode: Yup.string()
        .required("Pincode is required")
        .max(6, "Incorrect Pincode")
        .min(6, "Incorrect Pincode"),
      secaddress1: Yup.string().required("Address1 is required"),
      secaddress2: Yup.string().required("Address2 is required"),
      seclandmark: Yup.string().required("Landmark is required"),
      secpincode: Yup.string().required("Pincode is required"),
      secselectDistrictOption: Yup.string().required("Select the District"),
      secselectCountryOption: Yup.string().required("Select the country"),
      secselectStateOption: Yup.string().required("Select the State"),
      acceptTerms: Yup.bool()
        .oneOf([true], "You must accept the terms and conditions")
        .required("You must accept the terms and conditions"),
    });
    const onSubmit = (values, actions) => {
      setTimeout(() => {
        console.log("Form Values:", values);
        const timestamp = new Date().getTime();
        const storageKey = `FORM_DATA`;
        //  existing data from localStorage or create an empty array
        const existingFormData =
          JSON.parse(localStorage.getItem(storageKey)) || [];
        // Add the new form data to the array
        const newFormData = { ...values, timestamp };
        existingFormData.push(newFormData);
        // Store the updated array back in localStorage
        localStorage.setItem(storageKey, JSON.stringify(existingFormData));
        actions.setSubmitting(false);
        actions.resetForm();
      }, 1000);
    };
    const localStorageData =
      JSON.parse(localStorage.getItem("FORM_DATA")) || [];

    const dropdownOptions = localStorageData.map((data) => ({
      username: data.username,
      name: data.name,
    }));

    return (
      <>
        <Formik
          initialValues={initialValues}
          validationSchema={validationSchema}
          onSubmit={onSubmit}>
          {({ isSubmitting, values, setFieldTouched, setFieldValue }) => (
            <Form>
              <h3 className="container mt-4 text-bg-danger ">REGISTER HERE</h3>

              <Container className="border p-5 mt-3 ">
                <p className=" text-dark fw-bold ">PERSONAL DETAILS</p>
                <hr />
                {/* name and last name */}
                <Row>
                  <Col md={7}>
                    <div className="form-group mb-2">
                      <div className="form-group">
                        <FormikContainer
                          control="input"
                          type="text"
                          name="name"
                          id="name"
                          label="FIRST NAME"
                        />
                      </div>
                    </div>
                  </Col>
                  <Col md={5}>
                    <div className="form-group mb-2">
                      <FormikContainer
                        control="input"
                        type="text"
                        name="lastname"
                        id="lastname"
                        label="LAST NAME"
                      />
                    </div>
                  </Col>
                </Row>
                {/* mail */}
                <Row>
                  <Col md={7}>
                    <FormikContainer
                      control="input"
                      type="mail"
                      name="email"
                      id="email"
                      label="EMAIL"
                    />
                  </Col>
                  <Col md={5}>
                    <FormikContainer
                      control="input"
                      type="text"
                      name="username"
                      id="username"
                      label="USER NAME"
                    />
                  </Col>
                </Row>
                {/* password and repass */}
                <Row>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="password"
                      name="password"
                      id="password"
                      label="PASSWORD"
                    />
                  </Col>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="password"
                      name="repassword"
                      id="repassword"
                      label="RE ENTER PASSWORD"
                    />
                  </Col>
                </Row>
                {/* DOB and Mobile */}
                <Row>
                  <Col md={2}>
                    <FormikContainer
                      control="date"
                      name="birthDate"
                      label="DOB"
                    />
                  </Col>
                  <Col md={2}>
                    <AgeFieldComponent name="age" label="AGE" />
                  </Col>
                  <Col md={3}>
                    <FormikContainer
                      control="input"
                      type="number"
                      name="phoneNumber"
                      id="phoneNumber"
                      label="MOBILE NO"
                    />
                  </Col>
                  <Col md={5}>
                    <FormikContainer
                      control="radio"
                      name="radioOption"
                      label="GENDER"
                      options={radioOptions}
                    />
                  </Col>
                </Row>
                <p className="mt-3 text-dark fw-bold">PRIMARY ADDRESS</p>
                <hr />
                <Row>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="text"
                      name="address1"
                      id="address1"
                      label="ADDRESS LINE 1"
                    />
                  </Col>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="text"
                      name="address2"
                      id="address2"
                      label="ADDRESS LINE 2"
                    />
                  </Col>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="text"
                      name="landmark"
                      id="landmark"
                      label="LANDMARK"
                    />
                  </Col>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="number"
                      name="pincode"
                      id="pincode"
                      label="PIN CODE"
                    />
                  </Col>
                </Row>
                {/* country state district pincode */}
                <Row>
                  <Col md={4}>
                    <FormikContainer
                      control="select"
                      name="selectDistrictOption"
                      label="DISTRICT"
                      options={DropDistrictOptions}
                    />
                  </Col>
                  <Col md={4}>
                    <FormikContainer
                      control="select"
                      name="selectStateOption"
                      label="STATE"
                      options={DropStateOptions}
                    />
                  </Col>
                  <Col md={4}>
                    <FormikContainer
                      control="select"
                      name="selectCountryOption"
                      label="COUNTRY"
                      options={DropCountryOptions}
                    />
                  </Col>
                </Row>
                <p className="mt-3 text-dark fw-bold">SECONDRY ADDRESS</p>
                <hr />
                <Row>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="text"
                      name="secaddress1"
                      id="secaddress1"
                      label="ADDRESS LINE 1"
                      value={
                        this.state.sameAsPrimary
                          ? values.address1
                          : values.secaddress1
                      }
                      disabled={this.state.sameAsPrimary}
                    />
                  </Col>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="text"
                      name="secaddress2"
                      id="secaddress2"
                      label="ADDRESS LINE 2"
                      value={
                        this.state.sameAsPrimary
                          ? values.address2
                          : values.secaddress2
                      }
                      disabled={this.state.sameAsPrimary}
                    />
                  </Col>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="text"
                      name="seclandmark"
                      id="seclandmark"
                      label="LANDMARK"
                      value={
                        this.state.sameAsPrimary
                          ? values.landmark
                          : values.seclandmark
                      }
                      disabled={this.state.sameAsPrimary}
                    />
                  </Col>
                  <Col md={6}>
                    <FormikContainer
                      control="input"
                      type="number"
                      name="secpincode"
                      id="secpincode"
                      label="PIN CODE"
                      value={
                        this.state.sameAsPrimary
                          ? values.pincode
                          : values.secpincode
                      }
                      disabled={this.state.sameAsPrimary}
                    />
                  </Col>
                </Row>
                {/* country state district pincode */}
                <Row>
                  <Col md={4}>
                    <FormikContainer
                      control="select"
                      name="secselectDistrictOption"
                      label="DISTRICT"
                      options={DropDistrictOptions}
                      value={
                        this.state.sameAsPrimary
                          ? values.selectDistrictOption
                          : values.secselectDistrictOption
                      }
                      disabled={this.state.sameAsPrimary}
                    />
                  </Col>
                  <Col md={4}>
                    <FormikContainer
                      control="select"
                      name="secselectStateOption"
                      label="STATE"
                      options={DropStateOptions}
                      value={
                        this.state.sameAsPrimary
                          ? values.selectStateOption
                          : values.secselectStateOption
                      }
                      disabled={this.state.sameAsPrimary}
                    />
                  </Col>
                  <Col md={4}>
                    <FormikContainer
                      control="select"
                      name="secselectCountryOption"
                      label="COUNTRY"
                      options={DropCountryOptions}
                      value={
                        this.state.sameAsPrimary
                          ? values.selectCountryOption
                          : values.secselectCountryOption
                      }
                      disabled={this.state.sameAsPrimary}
                    />
                  </Col>
                </Row>
                <label className="text-primary mt-3">
                  <input
                    type="checkbox"
                    className="mx-2 mt-3"
                    checked={this.state.sameAsPrimary}
                    onChange={(e) => {
                      this.setState({ sameAsPrimary: e.target.checked });
                      if (e.target.checked) {
                        // Disable secondary fields and set their values to primary values
                        setFieldTouched("secaddress1", false);
                        setFieldValue("secaddress1", values.address1);

                        setFieldTouched("secaddress2", false);
                        setFieldValue("secaddress2", values.address2);

                        setFieldTouched("seclandmark", false);
                        setFieldValue("seclandmark", values.landmark);

                        setFieldTouched("secpincode", false);
                        setFieldValue("secpincode", values.pincode);
                        setFieldTouched("secselectStateOption", false);
                        setFieldValue(
                          "secselectStateOption",
                          values.selectStateOption
                        );
                        setFieldTouched("secselectDistrictOption", false);
                        setFieldValue(
                          "secselectDistrictOption",
                          values.selectDistrictOption
                        );
                        setFieldTouched("secselectCountryOption", false);
                        setFieldValue(
                          "secselectCountryOption",
                          values.selectCountryOption
                        );
                      }
                    }}
                  />
                  Same as Primary Address
                </label>
                <p className="mt-3 text-dark fw-bold">SKILLS</p>
                <hr />
                <Row>
                  <Col md={12}>
                    <FormikContainer
                      control="checkbox"
                      name="CheckOptions"
                      label="SKILLS"
                      options={CheckOptions}
                    />
                  </Col>
                </Row>
                <div className="custom-control custom-checkbox mt-3">
                  <Field
                    type="checkbox"
                    name="acceptTerms"
                    id="acceptTerms"
                    className="custom-control-input"
                  />
                  <label
                    className="custom-control-label mx-3"
                    htmlFor="acceptTerms">
                    I accept the{" "}
                    <a
                      href="http://google.com"
                      className="text-decoration-none">
                      terms and conditions
                    </a>
                  </label>
                </div>
                <ErrorMessage
                  name="acceptTerms"
                  component="div"
                  className="text-danger"
                />
                <Row>
                  <Col md={12}>
                    <div className="form-group">
                      <label
                        htmlFor="userDropdown "
                        className="form-label mt-3 text-danger fw-bold ">
                        USERS
                      </label>
                      <Field
                        as="select"
                        id="userDropdown"
                        name="userDropdown"
                        className="form-control text-success">
                        <option value="">Select an Option</option>
                        {dropdownOptions.map((option, index) => (
                          <option key={index} value={option.username}>
                            {option.name} - @{option.username}
                          </option>
                        ))}
                      </Field>
                    </div>
                  </Col>
                </Row>
                <button
                  type="submit"
                  className="btn btn-danger w-100 mt-4"
                  disabled={isSubmitting}>
                  {isSubmitting ? "Submitting..." : "Submit"}
                </button>
              </Container>
            </Form>
          )}
        </Formik>
      </>
    );
  }
}
