import React, { Component } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";

class SignUpForm extends Component {
  render() {
    const initialValues = {
      name: "",
      email: "",
      password: "",
      confirmPassword: "",
      phoneNumber: "",
      address: "",
      city: "",
      country: "",
    };
    const validationSchema = Yup.object({
      name: Yup.string().required("Name is required"),
      email: Yup.string()
        .email("Invalid email format")
        .required("Email is required"),
      password: Yup.string().required("Password is required"),
      confirmPassword: Yup.string()
        .oneOf([Yup.ref("password"), null], "Passwords must match")
        .required("Confirm Password is required"),
      phoneNumber: Yup.string()
        .min(10, "Must be at least 10 digits")
        .matches(/^\d+$/, "Phone number must be digits only")
        .required("Phone Number is required"),
      address: Yup.string().required("Address is required"),
      city: Yup.string().required("City is required"),
      country: Yup.string().required("Country is required"),
    });

    return (
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-md-6">
            <Formik
              initialValues={initialValues}
              validationSchema={validationSchema}
              onSubmit={(values, actions) => {
                setTimeout(() => {
                  console.log("Form Values:", values);
                  actions.setSubmitting(false);
                }, 1000);
                // actions.resetForm();
              }}>
                {({ isSubmitting }) => (
                  <Form>
                    <h4 className="mb-4 mt-4 text-danger">Registration Form</h4>
                    <div className="form-group">
                      <label htmlFor="name">Name</label>
                      <Field type="text" name="name" className="form-control" />
                      <ErrorMessage
                        name="name"
                        component="div"
                        className="text-danger"
                      />
                    </div>
                    <div className="form-group">
                      <label htmlFor="email">Email</label>
                      <Field type="email" name="email" className="form-control" />
                      <ErrorMessage
                        name="email"
                        component="div"
                        className="text-danger"
                      />
                    </div>
                    <div className="form-group row">
                      <div className="col-md-6">
                        <label htmlFor="password">Password</label>
                        <Field
                          type="password"
                          name="password"
                          className="form-control"
                        />
                        <ErrorMessage
                          name="password"
                          component="div"
                          className="text-danger"
                        />
                      </div>
                      <div className="col-md-6">
                        <label htmlFor="confirmPassword">Confirm Password</label>
                        <Field
                          type="password"
                          name="confirmPassword"
                          className="form-control"
                        />
                        <ErrorMessage
                          name="confirmPassword"
                          component="div"
                          className="text-danger"
                        />
                      </div>
                    </div>
                    <div className="form-group row">
                      <div className="col-md-6">
                        <label htmlFor="phoneNumber">Phone Number</label>
                        <Field
                          type="text"
                          name="phoneNumber"
                          className="form-control"
                        />
                        <ErrorMessage
                          name="phoneNumber"
                          component="div"
                          className="text-danger"
                        />
                      </div>
                      <div className="col-md-6">
                        <label htmlFor="address">Address</label>
                        <Field
                          type="text"
                          name="address"
                          className="form-control"
                        />
                        <ErrorMessage
                          name="address"
                          component="div"
                          className="text-danger"
                        />
                      </div>
                    </div>
                    <div className="form-group row">
                      <div className="col-md-6">
                        <label htmlFor="city">City</label>
                        <Field type="text" name="city" className="form-control" />
                        <ErrorMessage
                          name="city"
                          component="div"
                          className="text-danger"
                        />
                      </div>
                      <div className="col-md-6">
                        <label htmlFor="country">Country</label>
                        <Field
                          type="text"
                          name="country"
                          className="form-control"
                        />
                        <ErrorMessage
                          name="country"
                          component="div"
                          className="text-danger"
                        />
                      </div>
                    </div>
                    <button
                      type="submit"
                      className="btn btn-primary"
                      disabled={isSubmitting}>
                      {isSubmitting ? "Submitting..." : "Submit"}
                    </button>
                  </Form>
                )}
            </Formik>
          </div>
        </div>
      </div>
    );
  }
}

export default SignUpForm;



///////////////////////////////////////////
// ... (import statements and component class definition)

export default class SignUp extends Component {
  constructor(props) {
    super(props);
    this.state = {
      copyPrimaryToSecondary: false, // State to track checkbox status
    };
  }
  
  handleCheckboxChange = (e) => {
    this.setState({ copyPrimaryToSecondary: e.target.checked });
  };
  
  handlePrimaryAddressCopy = (values) => {
    if (this.state.copyPrimaryToSecondary) {
      values.secaddress1 = values.address1;
    }
    return values;
  };
  
  render() {
    // ... (existing code)
    
    return (
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={onSubmit}
        enableReinitialize // This allows reinitializing form values
      >
        {({ isSubmitting, values }) => (
          <Form>
            <Container className="border p-5 mt-3 ">
              {/* ... (existing code) */}
              <label>
                <input
                  type="checkbox"
                  className="mx-2 mt-3"
                  checked={this.state.copyPrimaryToSecondary}
                  onChange={this.handleCheckboxChange}
                />
                Same as Primary Address
              </label>
              {/* ... (existing code) */}
              <Row>
                <Col md={6}>
                  <FormikContainer
                    control="input"
                    type="text"
                    name="secaddress1"
                    id="secaddress1"
                    label="ADDRESS LINE 1"
                  />
                </Col>
                {/* ... (other secondary address fields) */}
              </Row>
              {/* ... (remaining code) */}
            </Container>
          </Form>
        )}
      </Formik>
    );
  }
}

